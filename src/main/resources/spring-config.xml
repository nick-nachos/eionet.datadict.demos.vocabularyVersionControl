<?xml version="1.0" encoding="UTF-8"?>
<beans 
    xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:c="http://www.springframework.org/schema/c"
    xmlns:context="http://www.springframework.org/schema/context"

    xmlns:tx="http://www.springframework.org/schema/tx"

    xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
    ">

    <context:property-placeholder location="classpath:app.properties"/>
    
    <context:component-scan base-package="eionet.datadict" />
    <context:spring-configured />
    
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${db.driver}"/>
        <property name="url" value="${db.url}"/>
        <property name="username" value="${db.username}"/>
        <property name="password" value="${db.password}"/>
        <!-- The following two properties required because MySQL kills idle connections after 8 hours. -->
        <property name="validationQuery" value="SELECT 1"/>
        <property name="testOnBorrow" value="true"/>
    </bean>
    
    <tx:annotation-driven transaction-manager="txManager"/>

    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    
    <bean id="resxManager" class="eionet.datadict.resx.EmbeddedResourceManager">
        <constructor-arg name="resourceMappings">
            <map>
                <entry 
                    key="eionet.datadict.dal.impl.versioning.RevisionDaoImpl.getLatestRevision" 
                    value="sqls/versioning/revisiondao/GetLatestRevision.sql" />
                <entry 
                    key="eionet.datadict.dal.impl.VocabularyDaoImpl.getVocabularies" 
                    value="sqls/vocabularydao/GetVocabulariesOfRevision.sql" />
                <entry 
                    key="eionet.datadict.dal.impl.VocabularyDaoImpl.getVocabularyById" 
                    value="sqls/vocabularydao/GetVocabularyById.sql" />
                <entry 
                    key="eionet.datadict.dal.impl.VocabularyDaoImpl.getVocabularyByRevisionAndIdentifier" 
                    value="sqls/vocabularydao/GetVocabularyByRevisionAndIdentifier.sql" />
            </map>
        </constructor-arg>
    </bean>
    
</beans>
